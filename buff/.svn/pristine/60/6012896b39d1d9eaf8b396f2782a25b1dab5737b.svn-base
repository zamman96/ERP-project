<?xml version="1.0" encoding="UTF-8"?>
<web-app version="4.0" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_4_0.xsd">
<!-- 
web.xml : tomcat 서버의 설정
 -->
	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<!-- 스프링 시큐리티 설정 파일을 지정함 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml
			/WEB-INF/spring/security-context.xml
		</param-value>
	</context-param>
	
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
		
		<!-- web.xml의 설정은 tomcat 자체 설정 -->
		<multipart-config>
			<location>C:\\upload</location><!-- 어디에 업로드? -->
			<max-file-size>20971520</max-file-size><!-- 업로드 최대 크기? 1MB * 20 -->
			<max-request-size>41943040</max-request-size><!-- 한번에 업로드 크기?40MB -->
			<file-size-threshold>20971520</file-size-threshold><!-- 메모리?20MB -->
		</multipart-config>
	</servlet>
		
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	
	<!-- 한글 처리 -->
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>
			org.springframework.web.filter.CharacterEncodingFilter
		</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- multipart filter 추가 -->
	<filter>
		<display-name>springMultipartFilter</display-name>
		<filter-name>springMultipartFilter</filter-name>
		<filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springMultipartFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- 서블릿 필터 클래스를 서블릿 컨테이너에 등록함	 -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	
	<!-- 예외 처리 : 프로그램이 처리되는 동안 특정한 문제가 일어났을 때 프로세스를 중단하고
			예외를 처리하는 것을 말함 
		톰켓은 기본적으로 기본 오류 페이지를 표시해주는데 페이지에 서버의 내부 정보가
		일반인들에게 노출되어 보안 취약점을 노린 공격을 받을 수 있음.
		따라서 최대한 정의된 오류 페이지를 표시하여 취약점을 최소화하도록 해야 함
	 -->
	 <!-- 상태 코드를 사용한 이동 대상 페이지 설정 
	 400 : 클라이언트의 요청이 잘못된 구문으로 구성됨
	 404 : 페이지가 없음
	 500 : JSP에서 예외가 발생함
	 -->
	 <error-page>
	 	<error-code>400</error-code>
	 	<location>/error/error400</location>
	 </error-page>
	 <error-page>
	 	<error-code>404</error-code>
	 	<location>/error/error404</location>
	 </error-page>
	 <error-page>
	 	<error-code>500</error-code>
	 	<location>/error/error500</location>
	 </error-page>
</web-app>











