<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
						http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- root-context.xml : 스프링 설정 파일 
	스프링 설정? view와 관련되지 않은 객체를 정의
	Service(기능), DAO(Repository : 저장소), DB등 비즈니스 로직과 관련된 설정
	BasicDataSource dataSource = new BasicDataSource();
	dataSource.setDriverClassName("oracle.jdbc.driver.OracleDriver");
	 -->
	<!-- dataSource : 데이터베이스와 관련된 정보를 설정 -->
	<bean id="dataSource"
		class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy" />
		<property name="url" value="jdbc:log4jdbc:oracle:thin:@112.220.114.130:1521:xe" />
		<property name="username" value="team4_202403F" />
		<property name="password" value="java" />
		<property name="initialSize" value="2" /> <!-- 초기 커넥션풀 개수 설정 -->
		<property name="maxTotal" value="3" /> <!-- 최대 커넥션풀 개수 설정 -->
	</bean>
	<!-- 데이터베이스와 연결을 맺고 끊어질 때까지의 라이프 사이클을 관리해주는
	sqlSession 객체를 생성 
	1) dataSource
	2) 매퍼 xml의 위치 지정 : src/main/resources
	-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:/sqlmap/**/*_SQL.xml" />
		<property name="configLocation" value="/WEB-INF/mybatisAlias/mybatisAlias.xml" />
	</bean>
	
	<!-- 데이터베이스에 개별적으로 쿼리를 실행시키는 객체 
		이 객체를 통해 query를 실행함
	-->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<bean id="multipartResolver" 
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 파일 업로드 용량(10MB) -->
		<property name="maxUploadSize" value="10485760" />
		<property name="defaultEncoding" value="UTF-8" />	
	</bean>
	
	<!-- 파일업로드 디렉토리 설정. 파일이 업로드 되고 웹에서 이미지가 보이려면 시간이 좀 걸림(3~5초) -->
	<bean id="uploadPath" class="java.lang.String">
		<constructor-arg value="c:\\upload" />
	</bean>
	
	<!-- 파일업로드 디렉토리 설정 파일이 업로드 되고 웹에서 이미지가 즉시 보임-->
<!-- 	<bean id="uploadFolderDirect" class="java.lang.String"> -->
<!-- 		<constructor-arg value="C:\\sts-bundle\\workspace\\.metadata\\.plugins\\org.eclipse.wst.server.core\\tmp0\\wtpwebapps\\buff\\resources\\upload" /> -->
<!-- 	</bean> -->
	
	<!-- Mapper 인터페이스 설정
	객발자가 직접 DAO를 설정하지 않아도 
	자동으로 Mapper 인터페이스를 활용하는 객체를 생성하게 됨
	 -->
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	 	<property name="basePackage" value="com.buff.mapper.**, com.buff.**.mapper.**"/>
	 </bean>
	 
	 <!-- 
	 트랜잭션 : 데이터베이스를 변경하기 위해 수행되어야할 논리적 단위.여러개의 sql로 구성됨
	 원자성, 일관성, 고립성(격리성), 지속성(영속성)
	  -->
	<!-- 트랜잭션 관리자의 자바빈 객체를 정의함 -->
<!-- 	<bean id="transactionManager" -->
<!-- 	 class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> -->
<!-- 		<property name="dataSource" ref="dataSource"></property> -->
<!-- 	</bean> -->
	
	    <!-- Transaction 설정하기 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- AOP Pointcut/Advisor 설정 -->
    <aop:config>
        <aop:pointcut id="txMethod" expression="execution(* com.example..*Service.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txMethod"/>
    </aop:config>

    <!-- AOP Transaction을 실행하는 대상 Method 설정 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="insert*" rollback-for="Exception"></tx:method>
            <tx:method name="create*" rollback-for="Exception"></tx:method>
            <tx:method name="update*" rollback-for="Exception"></tx:method>
            <tx:method name="delete*" rollback-for="Exception"></tx:method>
            <tx:method name="edit*" rollback-for="Exception"></tx:method>
            <tx:method name="regist*" rollback-for="Exception"></tx:method>
            <tx:method name="remove*" rollback-for="Exception"></tx:method>
            <tx:method name="select*" read-only="true"></tx:method>
            <tx:method name="get*" read-only="true"></tx:method>
        </tx:attributes>
    </tx:advice>
	
	<!-- 애너테이션 기반의 트랜잭션 제어를 활성화함 -->
<!-- 	<tx:annotation-driven/> -->
</beans>

